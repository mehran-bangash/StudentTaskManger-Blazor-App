@page "/courses"
@using Entities.Models
@inject StudentTaskMangerBlazorApp.Services.ApiCourseService CourseService
@rendermode InteractiveServer

<h3>Course Manager</h3>

<!-- Add/Edit Form -->
<div class="mb-4">
    <input class="form-control mb-2" placeholder="Course Name" @bind="courseForm.CourseName" />
    <input class="form-control mb-2" placeholder="Course Code" @bind="courseForm.CourseCode" />
    <textarea class="form-control mb-2" placeholder="Description" @bind="courseForm.Description"></textarea>

    @if (isEditing)
    {
        <button class="btn btn-success me-2" @onclick="async () => await UpdateCourse()">Update</button>
        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="async () => await AddCourse()">Add Course</button>
    }
</div>

<!-- Course Table -->
<table class="table table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Code</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in courses)
        {
            <tr>
                <td>@course.CourseId</td>
                <td>@course.CourseName</td>
                <td>@course.CourseCode</td>
                <td>@course.Description</td>
                <td>
                    <button class="btn btn-sm btn-warning me-2" @onclick="() => EditCourse(course)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="async () => await DeleteCourse(course.CourseId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Course> courses = new();
    private Course courseForm = new();
    private bool isEditing = false;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async System.Threading.Tasks.Task LoadCourses()
    {
        courses = await CourseService.GetCoursesAsync();
    }

    private async System.Threading.Tasks.Task AddCourse()
    {
        await CourseService.AddCourseAsync(courseForm);
        courseForm = new Course(); // Clear form
        await LoadCourses();
    }

    private void EditCourse(Course c)
    {
        courseForm = new Course
            {
                CourseId = c.CourseId,
                CourseName = c.CourseName,
                CourseCode = c.CourseCode,
                Description = c.Description
            };
        isEditing = true;
    }

    private async System.Threading.Tasks.Task UpdateCourse()
    {
        await CourseService.UpdateCourseAsync(courseForm);
        courseForm = new Course();
        isEditing = false;
        await LoadCourses();
    }

    private async System.Threading.Tasks.Task DeleteCourse(int id)
    {
        await CourseService.DeleteCourseAsync(id);
        await LoadCourses();
    }

    private void CancelEdit()
    {
        courseForm = new Course();
        isEditing = false;
    }
}
